clang -std=c11 -Wall -Wextra -Wno-unused-parameter -march=native -funsafe-math-optimizations -ftree-vectorize -Rpass=.* -O2 -c solver.c -o solver_clang_-O2.o
solver.c:30:25: remark: hoisting icmp [-Rpass=licm]
   30 |         x[IX(0, i)] = b == VERTICAL ? -x[IX(1, i)] : x[IX(1, i)];
      |                         ^
solver.c:30:56: remark: hoisting add [-Rpass=licm]
      |                                                        ^
solver.c:30:11: remark: hoisting add [-Rpass=licm]
      |           ^
solver.c:31:11: remark: hoisting add [-Rpass=licm]
   31 |         x[IX(n + 1, i)] = b == VERTICAL ? -x[IX(n, i)] : x[IX(n, i)];
solver.c:32:25: remark: hoisting icmp [-Rpass=licm]
   32 |         x[IX(i, 0)] = b == HORIZONTAL ? -x[IX(i, 1)] : x[IX(i, 1)];
solver.c:33:48: remark: hoisting mul [-Rpass=licm]
   33 |         x[IX(i, n + 1)] = b == HORIZONTAL ? -x[IX(i, n)] : x[IX(i, n)];
      |                                                ^
solver.c:30:42: remark: hoisting add [-Rpass=licm]
      |                                          ^
solver.c:33:11: remark: hoisting mul [-Rpass=licm]
solver.c:57:103: remark: hoisting fdiv [-Rpass=licm]
   57 |                     x[IX(i+m, j)] = (x0_vals[m] + a * (x_left[m] + x_right[m] + x_up[m] + x_down[m])) / c;
      |                                                                                                       ^
solver.c:57:23: remark: hoisting add [-Rpass=licm]
      |                       ^
solver.c:48:27: remark: hoisting add [-Rpass=licm]
   48 |             for (; i <= n - (GROUP_SIZE - 1); i += GROUP_SIZE) {
      |                           ^
solver.c:43:13: remark: hoisting fdiv [-Rpass=licm]
   43 | static void lin_solve(unsigned int n, boundary b, float* x, const float* x0, float a, float c)
      |             ^
solver.c:49:45: remark: hoisting add [-Rpass=licm]
   49 |                 float x_up[GROUP_SIZE] = {x[IX(i, j-1)], x[IX(i+1, j-1)], x[IX(i+2, j-1)], x[IX(i+3, j-1)],x[IX(i+4, j-1)], x[IX(i+5, j-1)], x[IX(i+6, j-1)], x[IX(i+7, j-1)]};
      |                                             ^
solver.c:49:45: remark: hoisting mul [-Rpass=licm]
solver.c:49:42: remark: hoisting getelementptr [-Rpass=licm]
solver.c:50:47: remark: hoisting mul [-Rpass=licm]
   50 |                 float x_left[GROUP_SIZE] = {x[IX(i-1, j)], x[IX(i, j)], x[IX(i+1, j)], x[IX(i+2, j)],x[IX(i+3, j)], x[IX(i+4, j)], x[IX(i+5, j)], x[IX(i+6, j)]};
      |                                               ^
solver.c:50:47: remark: hoisting add [-Rpass=licm]
solver.c:50:44: remark: hoisting getelementptr [-Rpass=licm]
      |                                            ^
solver.c:51:45: remark: hoisting getelementptr [-Rpass=licm]
   51 |                 float x_right[GROUP_SIZE] = {x[IX(i+1, j)], x[IX(i+2, j)], x[IX(i+3, j)], x[IX(i+4, j)],x[IX(i+5, j)], x[IX(i+6, j)], x[IX(i+7, j)], x[IX(i+8, j)]};
solver.c:52:47: remark: hoisting add [-Rpass=licm]
   52 |                 float x_down[GROUP_SIZE] = {x[IX(i, j+1)], x[IX(i+1, j+1)], x[IX(i+2, j+1)], x[IX(i+3, j+1)],x[IX(i+4, j+1)], x[IX(i+5, j+1)], x[IX(i+6, j+1)], x[IX(i+7, j+1)]};
solver.c:52:47: remark: hoisting mul [-Rpass=licm]
solver.c:52:44: remark: hoisting getelementptr [-Rpass=licm]
solver.c:54:45: remark: hoisting getelementptr [-Rpass=licm]
   54 |                 float x0_vals[GROUP_SIZE] = {x0[IX(i, j)], x0[IX(i+1, j)], x0[IX(i+2, j)], x0[IX(i+3, j)],x0[IX(i+4, j)], x0[IX(i+5, j)], x0[IX(i+6, j)], x0[IX(i+7, j)]};
solver.c:43:13: remark: hoisting fmul [-Rpass=licm]
solver.c:63:83: remark: hoisting fdiv [-Rpass=licm]
   63 |                                                   x[IX(i, j-1)] + x[IX(i, j+1)])) / c;
      |                                                                                   ^
solver.c:62:35: remark: hoisting add [-Rpass=licm]
   62 |                 x[IX(i, j)] = (x0[IX(i, j)] + a * (x[IX(i-1, j)] + x[IX(i+1, j)] +
      |                                   ^
solver.c:62:35: remark: hoisting mul [-Rpass=licm]
solver.c:62:54: remark: hoisting add [-Rpass=licm]
      |                                                      ^
solver.c:63:53: remark: hoisting add [-Rpass=licm]
      |                                                     ^
solver.c:63:53: remark: hoisting mul [-Rpass=licm]
solver.c:63:69: remark: hoisting add [-Rpass=licm]
      |                                                                     ^
solver.c:63:69: remark: hoisting mul [-Rpass=licm]
solver.c:43:13: remark: hoisting add [-Rpass=licm]
solver.c:48:22: remark: hoisting icmp [-Rpass=licm]
      |                      ^
solver.c:43:13: remark: hoisting getelementptr [-Rpass=licm]
solver.c:46:36: remark: hoisting icmp [-Rpass=licm]
   46 |         for (unsigned int j = 1; j <= n; j++) {
      |                                    ^
solver.c:43:13: remark: hoisting icmp [-Rpass=licm]
solver.c:56:17: remark: completely unrolled loop with 8 iterations [-Rpass=loop-unroll]
   56 |                 for (int m = 0; m < GROUP_SIZE; m++) {
      |                 ^
solver.c:45:5: remark: advising against unrolling the loop because it contains a call [-Rpass=TTI]
   45 |     for (unsigned int k = 0; k < 20; k++) {
      |     ^
solver.c:82:29: remark: hoisting add [-Rpass=licm]
   82 |             x = i - dt0 * u[IX(i, j)];
      |                             ^
solver.c:82:29: remark: hoisting mul [-Rpass=licm]
solver.c:83:17: remark: hoisting uitofp [-Rpass=licm]
   83 |             y = j - dt0 * v[IX(i, j)];
solver.c:86:30: remark: hoisting fadd [-Rpass=licm]
   86 |             } else if (x > n + 0.5f) {
      |                              ^
solver.c:93:30: remark: hoisting fadd [-Rpass=licm]
   93 |             } else if (y > n + 0.5f) {
solver.c:81:36: remark: hoisting icmp [-Rpass=licm]
   81 |         for (unsigned int i = 1; i <= n; i++) {
solver.c:74:13: remark: hoisting add [-Rpass=licm]
   74 | static void advect(unsigned int n, boundary b, float* d, const float* d0, const float* u, const float* v, float dt)
solver.c:74:13: remark: hoisting fadd [-Rpass=licm]
solver.c:81:36: remark: hoisting zext [-Rpass=licm]
solver.c:137:5: remark: 'add_source' inlined into 'dens_step' with (cost=10, threshold=225) at callsite dens_step:2:5; [-Rpass=inline]
  137 |     add_source(n, x, x0, dt);
solver.c:139:5: remark: 'diffuse' inlined into 'dens_step' with (cost=30, threshold=337) at callsite dens_step:4:5; [-Rpass=inline]
  139 |     diffuse(n, NONE, x, x0, diff, dt);
solver.c:119:5: remark: 'set_bnd' inlined into 'project' with (cost=205, threshold=225) at callsite project:10:5; [-Rpass=inline]
  119 |     set_bnd(n, NONE, div);
solver.c:120:5: remark: 'set_bnd' inlined into 'project' with (cost=205, threshold=225) at callsite project:11:5; [-Rpass=inline]
  120 |     set_bnd(n, NONE, p);
solver.c:131:5: remark: 'set_bnd' inlined into 'project' with (cost=215, threshold=225) at callsite project:22:5; [-Rpass=inline]
  131 |     set_bnd(n, VERTICAL, u);
solver.c:132:5: remark: 'set_bnd' inlined into 'project' with (cost=215, threshold=225) at callsite project:23:5; [-Rpass=inline]
  132 |     set_bnd(n, HORIZONTAL, v);
solver.c:115:38: remark: hoisting fdiv [-Rpass=licm]
  115 |             div[IX(i, j)] = constant * (u[IX(i + 1, j)] - u[IX(i - 1, j)] + v[IX(i, j + 1)] - v[IX(i, j - 1)]);
      |                                      ^
solver.c:115:43: remark: hoisting add [-Rpass=licm]
      |                                           ^
solver.c:115:43: remark: hoisting mul [-Rpass=licm]
solver.c:115:61: remark: hoisting add [-Rpass=licm]
      |                                                             ^
solver.c:115:79: remark: hoisting add [-Rpass=licm]
      |                                                                               ^
solver.c:115:79: remark: hoisting mul [-Rpass=licm]
solver.c:115:97: remark: hoisting add [-Rpass=licm]
      |                                                                                                 ^
solver.c:115:97: remark: hoisting mul [-Rpass=licm]
solver.c:109:13: remark: hoisting fdiv [-Rpass=licm]
  109 | static void project(unsigned int n, float* u, float* v, float* p, float* div)
solver.c:109:13: remark: hoisting fmul [-Rpass=licm]
solver.c:113:36: remark: hoisting icmp [-Rpass=licm]
  113 |         for (unsigned int i = 1; i <= n; i++) {
solver.c:109:13: remark: hoisting add [-Rpass=licm]
solver.c:127:43: remark: hoisting add [-Rpass=licm]
  127 |             u[IX(i, j)] -= constant2 * (p[IX(i + 1, j)] - p[IX(i - 1, j)]);
solver.c:127:43: remark: hoisting mul [-Rpass=licm]
solver.c:127:61: remark: hoisting add [-Rpass=licm]
solver.c:128:43: remark: hoisting add [-Rpass=licm]
  128 |             v[IX(i, j)] -= constant2 * (p[IX(i, j + 1)] - p[IX(i, j - 1)]);
solver.c:128:43: remark: hoisting mul [-Rpass=licm]
solver.c:128:61: remark: hoisting add [-Rpass=licm]
solver.c:128:61: remark: hoisting mul [-Rpass=licm]
solver.c:125:36: remark: hoisting icmp [-Rpass=licm]
  125 |         for (unsigned int i = 1; i <= n; i++) {
solver.c:113:36: remark: hoisting zext [-Rpass=licm]
solver.c:125:36: remark: hoisting zext [-Rpass=licm]
solver.c:146:5: remark: 'add_source' inlined into 'vel_step' with (cost=10, threshold=225) at callsite vel_step:2:5; [-Rpass=inline]
  146 |     add_source(n, u, u0, dt);
solver.c:147:5: remark: 'add_source' inlined into 'vel_step' with (cost=-14990, threshold=225) at callsite vel_step:3:5; [-Rpass=inline]
  147 |     add_source(n, v, v0, dt);
solver.c:149:5: remark: 'diffuse' inlined into 'vel_step' with (cost=30, threshold=337) at callsite vel_step:5:5; [-Rpass=inline]
  149 |     diffuse(n, VERTICAL, u, u0, visc, dt);
solver.c:151:5: remark: 'diffuse' inlined into 'vel_step' with (cost=-14970, threshold=337) at callsite vel_step:7:5; [-Rpass=inline]
  151 |     diffuse(n, HORIZONTAL, v, v0, visc, dt);
solver.c:22:5: remark: vectorized loop (vectorization width: 8, interleaved count: 4) [-Rpass=loop-vectorize]
   22 |     for (unsigned int i = 0; i < size; i++) {
solver.c:22:5: remark: unrolled loop by a factor of 8 with run-time trip count [-Rpass=loop-unroll]
solver.c:113:9: remark: vectorized loop (vectorization width: 8, interleaved count: 1) [-Rpass=loop-vectorize]
      |         ^
solver.c:125:9: remark: vectorized loop (vectorization width: 8, interleaved count: 1) [-Rpass=loop-vectorize]
solver.c:113:9: remark: Vectorized horizontal reduction with cost -12 and with tree size 16 [-Rpass=slp-vectorizer]
solver.c:113:9: remark: unrolled loop by a factor of 4 with run-time trip count [-Rpass=loop-unroll]
solver.c:29:5: remark: unrolled loop by a factor of 4 with run-time trip count [-Rpass=loop-unroll]
   29 |     for (unsigned int i = 1; i <= n; i++) {
solver.c:125:9: remark: unrolled loop by a factor of 4 with run-time trip count [-Rpass=loop-unroll]
solver.c:113:9: remark: hoisting icmp [-Rpass=licm]
solver.c:113:9: remark: hoisting trunc [-Rpass=licm]
solver.c:113:9: remark: hoisting and [-Rpass=licm]
solver.c:113:9: remark: hoisting or [-Rpass=licm]
solver.c:113:9: remark: hoisting insertelement [-Rpass=licm]
solver.c:113:9: remark: hoisting shufflevector [-Rpass=licm]
solver.c:125:9: remark: hoisting icmp [-Rpass=licm]
solver.c:125:9: remark: hoisting trunc [-Rpass=licm]
solver.c:125:9: remark: hoisting and [-Rpass=licm]
solver.c:125:9: remark: hoisting or [-Rpass=licm]
solver.c:125:9: remark: hoisting insertelement [-Rpass=licm]
solver.c:125:9: remark: hoisting shufflevector [-Rpass=licm]
solver.c:61:13: remark: vectorized loop (vectorization width: 8, interleaved count: 1) [-Rpass=loop-vectorize]
   61 |             for (; i <= n; i++) {
solver.c:61:13: remark: Vectorized horizontal reduction with cost -1 and with tree size 10 [-Rpass=slp-vectorizer]
solver.c:61:13: remark: SLP vectorized with cost -1 and with tree size 4 [-Rpass=slp-vectorizer]
solver.c:61:13: remark: hoisting icmp [-Rpass=licm]
solver.c:61:13: remark: hoisting shufflevector [-Rpass=licm]
solver.c:43:13: remark: hoisting insertelement [-Rpass=licm]
solver.c:43:13: remark: hoisting shufflevector [-Rpass=licm]
solver.c:29:5: remark: unrolled loop by a factor of 2 with run-time trip count [-Rpass=loop-unroll]
